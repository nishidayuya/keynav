.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XDOTOOL 1"
.TH XDOTOOL 1 "2008-06-01" "" ""
.SH "NAME"
xdotool \- command\-line X11 automation tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBxdotool\fR \fIcmd\fR \fIargs...\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBxdotool\fR lets you programatically (or manually) simulate keyboard input and
mouse activity, move and resize windows, etc. It does this using X11's
\&\s-1XTEST\s0 extension and other Xlib functions.
.PP
There is some support for Extended Window Manager Hints (aka \s-1EWMH\s0 or NetWM).
See the \*(L"\s-1EXTENDED\s0 \s-1WINDOW\s0 \s-1MANAGER\s0 \s-1HINTS\s0\*(R" section for more information.
.SH "KEYBOARD COMMANDS"
.IX Header "KEYBOARD COMMANDS"
.IP "\fBkey\fR \fIkeystroke\fR" 4
.IX Item "key keystroke"
Type a given keystroke. Examples being \*(L"alt+r\*(R", \*(L"Control_L+J\*(R",
\&\*(L"ctrl+alt+n\*(R", \*(L"BackSpace\*(R".
.Sp
Generally, any valid X Keysym string will work. Multiple keys are
separated by '+'. Aliases exist for \*(L"alt\*(R", \*(L"ctrl\*(R", \*(L"shift\*(R", \*(L"super\*(R",
and \*(L"meta\*(R" which all map to Foo_L, such as Alt_L and Control_L, etc.
.Sp
Example: Send the keystroke \*(L"F2\*(R"
 xdotool key F2
.IP "\fBkeydown\fR \fIkeystroke\fR" 4
.IX Item "keydown keystroke"
Same as above, except only keydown events are sent.
.IP "\fBkeyup\fR \fIkeystroke\fR" 4
.IX Item "keyup keystroke"
Same as above, except only keyup events are sent.
.IP "\fBtype\fR \fIsomething to type\fR" 4
.IX Item "type something to type"
Types a series of letters. In order, as fast as possible.
.Sp
Example: to type 'Hello world!' you would do:
 xdotool type 'Hello world!'
.SH "MOUSE COMMANDS"
.IX Header "MOUSE COMMANDS"
.IP "\fBmousemove\fR \fIx\fR \fIy\fR" 4
.IX Item "mousemove x y"
Move the mouse to the specific X and Y coordinates on the screen
.IP "\fBmousedown\fR \fIbutton\fR" 4
.IX Item "mousedown button"
Send 'mouse down' for the given button. 1 == left, 2 ==  middle,  3  == right,
etc.
.IP "\fBmouseup\fR \fIbutton\fR" 4
.IX Item "mouseup button"
Send 'mouse up for the given button
.IP "\fBclick\fR \fIbutton\fR" 4
.IX Item "click button"
Send mousedown followed by mouseup for the given button
.SH "WINDOW COMMANDS"
.IX Header "WINDOW COMMANDS"
.IP "\fBsearch\fR \fI[options]\fR \fIsomestring\fR" 4
.IX Item "search [options] somestring"
Search  for windows with titles, names, or classes matching somestring.  The
output is line-delimited list of X window identifiers
.Sp
The options available are:
.RS 4
.IP "\fB\-\-onlyvisible\fR \- Show only visible windows in the results." 4
.IX Item "--onlyvisible - Show only visible windows in the results."
.PD 0
.IP "\fB\-\-title\fR \- Match against the window title" 4
.IX Item "--title - Match against the window title"
.IP "\fB\-\-name\fR \- Match against the window name" 4
.IX Item "--name - Match against the window name"
.IP "\fB\-\-class\fR \- Match against the window class" 4
.IX Item "--class - Match against the window class"
.RE
.RS 4
.PD
.Sp
The default options are \f(CW\*(C`\-\-title \-\-name \-\-class\*(C'\fR
.RE
.IP "\fBgetwindowfocus\fR" 4
.IX Item "getwindowfocus"
Prints the window id of the currently focused window
.IP "\fBwindowsize\fR [options] windowid width height" 4
.IX Item "windowsize [options] windowid width height"
Set the window size of the given window
.Sp
The options available are:
.RS 4
.IP "\fB\-\-usehints\fR \- Use window sizing hints when setting width and height. This is useful on terminals." 4
.IX Item "--usehints - Use window sizing hints when setting width and height. This is useful on terminals."
.RE
.RS 4
.Sp
Example: To set a terminal to be 80x24 characters, you would use:
\&\f(CW\*(C`xdotool windowsize \-\-usehints windowid 80 24\*(C'\fR
.RE
.IP "\fBwindowmove\fR \fIwindowid\fR \fIx\fR \fIy\fR" 4
.IX Item "windowmove windowid x y"
Move the window to the given position
.IP "\fBwindowfocus\fR \fIwindowid\fR" 4
.IX Item "windowfocus windowid"
Focus the window
.IP "\fBwindowmap\fR \fIwindow_id\fR" 4
.IX Item "windowmap window_id"
Map a window. In X11 terminology, mapping a window means making it visible on
the screen.
.IP "\fBwindowraise\fR \fIwindow_id\fR" 4
.IX Item "windowraise window_id"
Raise the window to the top of the stack. This may not work on all window managers.
.IP "\fBwindowunmap\fR \fIwindow_id\fR" 4
.IX Item "windowunmap window_id"
Unmap a window, making it no longer appear on your screen.
.SH "DESKTOP AND WINDOW COMMANDS"
.IX Header "DESKTOP AND WINDOW COMMANDS"
These commands follow the \s-1EWMH\s0 standard. See the section \*(L"\s-1EXTENDED\s0 \s-1WINDOW\s0 \s-1MANAGER\s0 \s-1HINTS\s0\*(R" for more information.
.IP "\fBwindowactivate\fR \fIwindowid\fR" 4
.IX Item "windowactivate windowid"
Activate the window. This command is different from windowfocus:
if the window is on another desktop, we will switch to that desktop. It also
uses a different method for bringing the window up. I recommend trying this
command before using windowfocus, as it will work on more window managers.
.IP "\fBset_num_desktops\fR \fInumber\fR" 4
.IX Item "set_num_desktops number"
Changes the number of desktops or workspaces.
.IP "\fBget_num_desktops\fR" 4
.IX Item "get_num_desktops"
Output the current number of desktops.
.IP "\fBset_desktop\fR \fIdesktop_number\fR" 4
.IX Item "set_desktop desktop_number"
Change the current view to the specified desktop.
.IP "\fBget_desktop\fR" 4
.IX Item "get_desktop"
Output the current desktop in view.
.IP "\fBset_desktop_for_window\fR \fIwindow_id\fR \fIdesktop_number\fR" 4
.IX Item "set_desktop_for_window window_id desktop_number"
Move a window to a different desktop.
.IP "\fBget_desktop_for_window\fR \fIwindow_id\fR" 4
.IX Item "get_desktop_for_window window_id"
Output the desktop currently containing the given window.
.SH "EXTENDED WINDOW MANAGER HINTS"
.IX Header "EXTENDED WINDOW MANAGER HINTS"
The following pieces of the \s-1EWMH\s0 standard are supported:
.IP "_NET_SUPPORTED" 4
.IX Item "_NET_SUPPORTED"
Asks the window manager what is supported
.IP "_NET_CURRENT_DESKTOP" 4
.IX Item "_NET_CURRENT_DESKTOP"
Query and set the current desktop. Support for this enables these commands:
\&\f(CW\*(C`set_desktop\*(C'\fR, \f(CW\*(C`get_desktop\*(C'\fR.
.IP "_NET_WM_DESKTOP" 4
.IX Item "_NET_WM_DESKTOP"
Query and set what desktop a window is living in. Support for this enables
these commands: \f(CW\*(C`set_desktop_for_window\*(C'\fR, \f(CW\*(C`get_desktop_for_window\*(C'\fR.
.IP "_NET_ACTIVATE_WINDOW" 4
.IX Item "_NET_ACTIVATE_WINDOW"
Activate a window by asking the window manager to bring it forward. Support for
this enables these commands: \f(CW\*(C`windowactivate\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIxprop\fR\|(1), \fIxwininfo\fR\|(1), 
.PP
Project site: <http://www.semicomplete.com/projects/xdotool>
.PP
Google Code: <http://semicomplete.googlecode.com/>
.SH "CONTACT"
.IX Header "CONTACT"
Please send questions to xdotool\-users@googlegroups.com. File bugs and feature requests at the following \s-1URL:\s0
.PP
<http://code.google.com/p/semicomplete/issues/list>
.SH "AUTHOR"
.IX Header "AUTHOR"
xdotool was written by Jordan Sissel.
.PP
This manual page was written originally by Daniel Kahn Gillmor
<dkg\-debian.org@fifthhorseman.net> for the Debian project (but may be
used by others). It is maintained by Jordan Sissel.
